{"version":3,"file":"index.cjs.js","sources":["../src/utils/helpers.ts","../src/clients/auth.ts","../src/clients/functions/index.ts","../src/clients/graphql.ts","../src/clients/storage.ts","../src/clients/nhost.ts"],"sourcesContent":["import { NhostClientConstructorParams } from './types'\n\n// a port can be a number or a placeholder string with leading and trailing double underscores, f.e. \"8080\" or \"__PLACEHOLDER_NAME__\"\nexport const LOCALHOST_REGEX =\n  /^((?<protocol>http[s]?):\\/\\/)?(?<host>(localhost|local))(:(?<port>(\\d+|__\\w+__)))?$/\n\n/**\n * \\`subdomain\\` and `region` should be used when running the Nhost platform\n *\n * @param subdomainAndRegion\n * @param service\n * @returns\n */\nexport function urlFromSubdomain(\n  subdomainAndRegion: Pick<NhostClientConstructorParams, 'region' | 'subdomain'>,\n  service: string\n): string {\n  const { subdomain, region } = subdomainAndRegion\n\n  if (!subdomain) {\n    throw new Error('A `subdomain` must be set.')\n  }\n\n  // check if subdomain is [http[s]://]localhost[:port] or [http[s]://]local[:port]\n  const subdomainLocalhostFound = subdomain.match(LOCALHOST_REGEX)\n  if (subdomainLocalhostFound?.groups) {\n    const { protocol, host, port } = subdomainLocalhostFound.groups\n\n    const urlFromEnv = getValueFromEnv(service)\n    if (urlFromEnv) {\n      return urlFromEnv\n    }\n\n    if (host === 'localhost') {\n      console.warn(\n        'The `subdomain` is set to \"localhost\". Support for this will be removed in a future release. Please use \"local\" instead.'\n      )\n\n      return `${protocol || 'http'}://localhost:${port || 1337}/v1/${service}`\n    }\n\n    return port\n      ? `${protocol || 'https'}://local.${service}.nhost.run:${port}/v1`\n      : `${protocol || 'https'}://local.${service}.nhost.run/v1`\n  }\n\n  if (!region) {\n    throw new Error('`region` must be set when using a `subdomain` other than \"local\".')\n  }\n\n  return `https://${subdomain}.${service}.${region}.nhost.run/v1`\n}\n\n/**\n *\n * @returns whether the code is running in a browser\n */\nfunction isBrowser(): boolean {\n  return typeof window !== 'undefined'\n}\n\n/**\n *\n * @returns whether the code is running in a Node.js environment\n */\nfunction environmentIsAvailable() {\n  return typeof process !== 'undefined' && process.env\n}\n\n/**\n *\n * @param service auth | storage | graphql | functions\n * @returns the service's url if the corresponding env var is set\n * NHOST_${service}_URL\n */\nfunction getValueFromEnv(service: string) {\n  if (isBrowser() || !environmentIsAvailable()) {\n    return null\n  }\n\n  return process.env[`NHOST_${service.toUpperCase()}_URL`]\n}\n\n/**\n * Combines a base URL and a path into a single URL string.\n *\n * @param baseUrl - The base URL to use.\n * @param path - The path to append to the base URL.\n * @returns The combined URL string.\n */\nexport function buildUrl(baseUrl: string, path: string) {\n  const hasLeadingSlash = path.startsWith('/')\n  const urlPath = hasLeadingSlash ? path : `/${path}`\n  return baseUrl + urlPath\n}\n","import { HasuraAuthClient } from '@nhost/hasura-auth-js'\n\nimport { urlFromSubdomain } from '../utils/helpers'\nimport { NhostClientConstructorParams } from '../utils/types'\n\n/**\n * Creates a client for Auth from either a subdomain or a URL\n */\nexport function createAuthClient(params: NhostClientConstructorParams) {\n  const authUrl = 'subdomain' in params ? urlFromSubdomain(params, 'auth') : params.authUrl\n\n  if (!authUrl) {\n    throw new Error('Please provide `subdomain` or `authUrl`.')\n  }\n\n  return new HasuraAuthClient({ url: authUrl, ...params })\n}\n","import fetch from 'isomorphic-unfetch'\nimport { buildUrl, urlFromSubdomain } from '../../utils/helpers'\nimport { NhostClientConstructorParams } from '../../utils/types'\nimport {\n  NhostFunctionCallConfig,\n  NhostFunctionCallResponse,\n  NhostFunctionsConstructorParams\n} from './types'\n/**\n * Creates a client for Functions from either a subdomain or a URL\n */\nexport function createFunctionsClient(params: NhostClientConstructorParams) {\n  const functionsUrl =\n    'subdomain' in params ? urlFromSubdomain(params, 'functions') : params.functionsUrl\n\n  if (!functionsUrl) {\n    throw new Error('Please provide `subdomain` or `functionsUrl`.')\n  }\n\n  return new NhostFunctionsClient({ url: functionsUrl, ...params })\n}\n\n/**\n * @alias Functions\n */\nexport class NhostFunctionsClient {\n  readonly url: string\n  private accessToken: string | null\n  private adminSecret?: string\n  private headers: Record<string, string> = {}\n\n  constructor(params: NhostFunctionsConstructorParams) {\n    const { url, adminSecret } = params\n\n    this.url = url\n    this.accessToken = null\n    this.adminSecret = adminSecret\n  }\n\n  /**\n   * Use `nhost.functions.call` to call (sending a POST request to) a serverless function. Use generic\n   * types to specify the expected response data, request body and error message.\n   *\n   * @example\n   * ### Without generic types\n   * ```ts\n   * await nhost.functions.call('send-welcome-email', { email: 'joe@example.com', name: 'Joe Doe' })\n   * ```\n   *\n   * @example\n   * ### Using generic types\n   * ```ts\n   * type Data = {\n   *   message: string\n   * }\n   *\n   * type Body = {\n   *   email: string\n   *   name: string\n   * }\n   *\n   * type ErrorMessage = {\n   *   details: string\n   * }\n   *\n   * // The function will only accept a body of type `Body`\n   * const { res, error } = await nhost.functions.call<Data, Body, ErrorMessage>(\n   *   'send-welcome-email',\n   *   { email: 'joe@example.com', name: 'Joe Doe' }\n   * )\n   *\n   * // Now the response data is typed as `Data`\n   * console.log(res?.data.message)\n   *\n   * // Now the error message is typed as `ErrorMessage`\n   * console.log(error?.message.details)\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/functions/call\n   */\n  async call<TData = unknown, TBody = any, TErrorMessage = any>(\n    url: string,\n    body?: TBody | null,\n    config?: NhostFunctionCallConfig\n  ): Promise<NhostFunctionCallResponse<TData, TErrorMessage>> {\n    const headers: HeadersInit = {\n      'Content-Type': 'application/json',\n      ...this.generateAccessTokenHeaders(),\n      ...config?.headers,\n      ...this.headers // nhost functions client headers to be sent with all calls\n    }\n\n    const fullUrl = buildUrl(this.url, url)\n\n    try {\n      const result = await fetch(fullUrl, {\n        body: body ? JSON.stringify(body) : null,\n        headers,\n        method: 'POST'\n      })\n\n      if (!result.ok) {\n        let message: TErrorMessage\n\n        if (result.headers.get('content-type')?.includes('application/json')) {\n          message = await result.json()\n        } else {\n          message = (await result.text()) as unknown as TErrorMessage\n        }\n\n        return {\n          res: null,\n          error: {\n            message,\n            error: result.statusText,\n            status: result.status\n          }\n        }\n      }\n\n      let data: TData\n\n      if (result.headers.get('content-type')?.includes('application/json')) {\n        data = await result.json()\n      } else {\n        data = (await result.text()) as unknown as TData\n      }\n\n      return {\n        res: { data, status: result.status, statusText: result.statusText },\n        error: null\n      }\n    } catch (e) {\n      const error = e as Error\n      return {\n        res: null,\n        error: {\n          message: error.message as unknown as TErrorMessage,\n          status: error.name === 'AbortError' ? 0 : 500,\n          error: error.name === 'AbortError' ? 'abort-error' : 'unknown'\n        }\n      }\n    }\n  }\n\n  /**\n   * Use `nhost.functions.setAccessToken` to a set an access token to be used in subsequent functions requests. Note that if you're signin in users with `nhost.auth.signIn()` the access token will be set automatically.\n   *\n   * @example\n   * ```ts\n   * nhost.functions.setAccessToken('some-access-token')\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/functions/set-access-token\n   */\n  setAccessToken(accessToken: string | undefined) {\n    if (!accessToken) {\n      this.accessToken = null\n      return\n    }\n\n    this.accessToken = accessToken\n  }\n\n  /**\n   * Use `nhost.functions.getHeaders` to get the global headers sent with all functions requests.\n   *\n   * @example\n   * ```ts\n   * nhost.functions.getHeaders()\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/functions/get-headers\n   */\n  getHeaders(): Record<string, string> {\n    return this.headers\n  }\n\n  /**\n   * Use `nhost.functions.setHeaders` to a set global headers to be sent in all subsequent functions requests.\n   *\n   * @example\n   * ```ts\n   * nhost.functions.setHeaders({\n   *  'x-hasura-role': 'admin'\n   * })\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/functions/set-headers\n   */\n  setHeaders(headers?: Record<string, string>) {\n    if (!headers) {\n      return\n    }\n\n    this.headers = {\n      ...this.headers,\n      ...headers\n    }\n  }\n\n  /**\n   * Use `nhost.functions.unsetHeaders` to a unset global headers sent with all functions requests.\n   *\n   * @example\n   * ```ts\n   * nhost.functions.unsetHeaders()\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/functions/unset-headers\n   */\n  unsetHeaders() {\n    const userRole = this.headers['x-hasura-role']\n\n    // preserve the user role header to avoid invalidating preceding 'setRole' call.\n    this.headers = userRole ? { 'x-hasura-role': userRole } : {}\n  }\n\n  generateAccessTokenHeaders(): NhostFunctionCallConfig['headers'] {\n    if (this.adminSecret) {\n      return {\n        'x-hasura-admin-secret': this.adminSecret\n      }\n    }\n    if (this.accessToken) {\n      return {\n        Authorization: `Bearer ${this.accessToken}`\n      }\n    }\n    return {}\n  }\n}\n","import { NhostGraphqlClient } from '@nhost/graphql-js'\nimport { urlFromSubdomain } from '../utils/helpers'\nimport { NhostClientConstructorParams } from '../utils/types'\n\n/**\n * Creates a client for GraphQL from either a subdomain or a URL\n */\nexport function createGraphqlClient(params: NhostClientConstructorParams) {\n  const graphqlUrl = 'subdomain' in params ? urlFromSubdomain(params, 'graphql') : params.graphqlUrl\n\n  if (!graphqlUrl) {\n    throw new Error('Please provide `subdomain` or `graphqlUrl`.')\n  }\n\n  return new NhostGraphqlClient({ url: graphqlUrl, ...params })\n}\n","import { HasuraStorageClient } from '@nhost/hasura-storage-js'\n\nimport { urlFromSubdomain } from '../utils/helpers'\nimport { NhostClientConstructorParams } from '../utils/types'\n\n/**\n * Creates a client for Storage from either a subdomain or a URL\n */\nexport function createStorageClient(params: NhostClientConstructorParams) {\n  const storageUrl = 'subdomain' in params ? urlFromSubdomain(params, 'storage') : params.storageUrl\n\n  if (!storageUrl) {\n    throw new Error('Please provide `subdomain` or `storageUrl`.')\n  }\n\n  return new HasuraStorageClient({ url: storageUrl, ...params })\n}\n","import { NhostGraphqlClient } from '@nhost/graphql-js'\nimport { HasuraAuthClient } from '@nhost/hasura-auth-js'\nimport { HasuraStorageClient } from '@nhost/hasura-storage-js'\nimport { NhostClientConstructorParams } from '../utils/types'\nimport { createAuthClient } from './auth'\nimport { createFunctionsClient, NhostFunctionsClient } from './functions'\nimport { createGraphqlClient } from './graphql'\nimport { createStorageClient } from './storage'\n\nexport const createNhostClient = (params: NhostClientConstructorParams) => new NhostClient(params)\n\nexport class NhostClient {\n  auth: HasuraAuthClient\n  storage: HasuraStorageClient\n  functions: NhostFunctionsClient\n  graphql: NhostGraphqlClient\n  private _adminSecret?: string\n  readonly devTools?: boolean\n\n  /**\n   *\n   * @example\n   * ```ts\n   * // Create a new Nhost client from subdomain and region.\n   * const nhost = new NhostClient({ subdomain, region });\n   * ```\n   *\n   *\n   * ```ts\n   * // Create a new Nhost client from individual service URLs (custom domains, self-hosting, etc).\n   * const nhost = new NhostClient({ \n   *   authUrl: \"my-auth-service-url\",\n   *   storageUrl: \"my-storage-service-url\",\n   *   graphqlUrl: \"my-graphql-service-url\",\n   *   functionsUrl: \"my-functions-service-url\",\n   * });\n   * ```\n   *\n   *\n   * ```ts\n   * // Create a new Nhost client for local development.\n   * const nhost = new NhostClient({ subdomain: \"local\" });\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript\n   */\n  constructor({\n    refreshIntervalTime,\n    clientStorage,\n    clientStorageType,\n    autoRefreshToken,\n    autoSignIn,\n    adminSecret,\n    devTools,\n    start = true,\n    ...urlParams\n  }: NhostClientConstructorParams) {\n    // * Set clients for all services\n    this.auth = createAuthClient({\n      refreshIntervalTime,\n      clientStorage,\n      clientStorageType,\n      autoRefreshToken,\n      autoSignIn,\n      start,\n      ...urlParams\n    })\n    this.storage = createStorageClient({ adminSecret, ...urlParams })\n    this.functions = createFunctionsClient({ adminSecret, ...urlParams })\n    this.graphql = createGraphqlClient({ adminSecret, ...urlParams })\n\n    this.auth.onAuthStateChanged((event, session) => {\n      if (event === 'SIGNED_OUT') {\n        this.storage.setAccessToken(undefined)\n        this.functions.setAccessToken(undefined)\n        this.graphql.setAccessToken(undefined)\n\n        return\n      }\n\n      const accessToken = session?.accessToken\n      this.storage.setAccessToken(accessToken)\n      this.functions.setAccessToken(accessToken)\n      this.graphql.setAccessToken(accessToken)\n    })\n\n    // * Update access token for clients, including when signin in\n    this.auth.onTokenChanged((session) => {\n      const accessToken = session?.accessToken\n      this.storage.setAccessToken(accessToken)\n      this.functions.setAccessToken(accessToken)\n      this.graphql.setAccessToken(accessToken)\n    })\n\n    this._adminSecret = adminSecret\n    this.devTools = devTools\n  }\n\n  get adminSecret(): string | undefined {\n    return this._adminSecret\n  }\n\n  set adminSecret(newValue: string | undefined) {\n    this._adminSecret = newValue\n    this.storage.setAdminSecret(newValue)\n    // TODO inconsistent API: storage can change admin secret, but functions/graphql cannot\n    // this.functions.setAdminSecret(newValue)\n    // this.graphql.setAdminSecret(newValue)\n  }\n\n  /**\n   * Use `nhost.setRole` to set the user role for all subsequent GraphQL, storage, and functions calls.\n   * Underneath, this method sets the `x-hasura-role` header on the graphql, storage,\n   * and functions clients.\n   *\n   * ```ts\n   * nhost.graphql.setHeaders({ 'x-hasura-role': role })\n   * nhost.storage.setHeaders({ 'x-hasura-role': role })\n   * nhost.functions.setHeaders({ 'x-hasura-role': role })\n   * ```\n   *\n   * Note: Exercise caution when mixing the use of `setRole` along with `setHeaders` when setting the\n   * `x-hasura-role` header, as the last call will override any previous ones.\n   *\n   * @example\n   * ```ts\n   * nhost.setRole('admin')\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/set-role\n   */\n  setRole(role: string) {\n    this.graphql.setHeaders({ 'x-hasura-role': role })\n    this.storage.setHeaders({ 'x-hasura-role': role })\n    this.functions.setHeaders({ 'x-hasura-role': role })\n  }\n\n  /**\n   * Use `nhost.unsetRole` to unset the user role for all subsequent graphql, storage and functions calls.\n   * Underneath, this method removes the `x-hasura-role` header from the graphql, storage and functions clients.\n   *\n   * Note: Exercise caution when mixing the use of `unsetRole` along with `setHeaders` when setting the\n   * `x-hasura-role` header, as the last call will override any previous ones.\n   *\n   * @example\n   * ```ts\n   * nhost.unsetRole()\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/unset-role\n   */\n  unsetRole() {\n    this.graphql.setHeaders((({ 'x-hasura-role': _, ...rest }) => rest)(this.graphql.getHeaders()))\n    this.storage.setHeaders((({ 'x-hasura-role': _, ...rest }) => rest)(this.storage.getHeaders()))\n    this.functions.setHeaders(\n      (({ 'x-hasura-role': _, ...rest }) => rest)(this.functions.getHeaders())\n    )\n  }\n}\n"],"names":["LOCALHOST_REGEX","urlFromSubdomain","subdomainAndRegion","service","subdomain","region","subdomainLocalhostFound","protocol","host","port","urlFromEnv","getValueFromEnv","isBrowser","environmentIsAvailable","buildUrl","baseUrl","path","urlPath","createAuthClient","params","authUrl","HasuraAuthClient","createFunctionsClient","functionsUrl","NhostFunctionsClient","url","adminSecret","body","config","headers","fullUrl","result","fetch","message","_a","data","_b","e","error","accessToken","userRole","createGraphqlClient","graphqlUrl","NhostGraphqlClient","createStorageClient","storageUrl","HasuraStorageClient","createNhostClient","NhostClient","refreshIntervalTime","clientStorage","clientStorageType","autoRefreshToken","autoSignIn","devTools","start","urlParams","event","session","newValue","role","_","rest"],"mappings":"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"}