{"version":3,"file":"index.esm.js","sources":["../src/utils/helpers.ts","../src/clients/auth.ts","../src/clients/functions/index.ts","../src/clients/graphql.ts","../src/clients/storage.ts","../src/clients/nhost.ts"],"sourcesContent":["import { NhostClientConstructorParams } from './types'\n\n// a port can be a number or a placeholder string with leading and trailing double underscores, f.e. \"8080\" or \"__PLACEHOLDER_NAME__\"\nexport const LOCALHOST_REGEX =\n  /^((?<protocol>http[s]?):\\/\\/)?(?<host>(localhost|local))(:(?<port>(\\d+|__\\w+__)))?$/\n\n/**\n * \\`subdomain\\` and `region` should be used when running the Nhost platform\n *\n * @param subdomainAndRegion\n * @param service\n * @returns\n */\nexport function urlFromSubdomain(\n  subdomainAndRegion: Pick<NhostClientConstructorParams, 'region' | 'subdomain'>,\n  service: string\n): string {\n  const { subdomain, region } = subdomainAndRegion\n\n  if (!subdomain) {\n    throw new Error('A `subdomain` must be set.')\n  }\n\n  // check if subdomain is [http[s]://]localhost[:port] or [http[s]://]local[:port]\n  const subdomainLocalhostFound = subdomain.match(LOCALHOST_REGEX)\n  if (subdomainLocalhostFound?.groups) {\n    const { protocol, host, port } = subdomainLocalhostFound.groups\n\n    const urlFromEnv = getValueFromEnv(service)\n    if (urlFromEnv) {\n      return urlFromEnv\n    }\n\n    if (host === 'localhost') {\n      console.warn(\n        'The `subdomain` is set to \"localhost\". Support for this will be removed in a future release. Please use \"local\" instead.'\n      )\n\n      return `${protocol || 'http'}://localhost:${port || 1337}/v1/${service}`\n    }\n\n    return port\n      ? `${protocol || 'https'}://local.${service}.nhost.run:${port}/v1`\n      : `${protocol || 'https'}://local.${service}.nhost.run/v1`\n  }\n\n  if (!region) {\n    throw new Error('`region` must be set when using a `subdomain` other than \"local\".')\n  }\n\n  return `https://${subdomain}.${service}.${region}.nhost.run/v1`\n}\n\n/**\n *\n * @returns whether the code is running in a browser\n */\nfunction isBrowser(): boolean {\n  return typeof window !== 'undefined'\n}\n\n/**\n *\n * @returns whether the code is running in a Node.js environment\n */\nfunction environmentIsAvailable() {\n  return typeof process !== 'undefined' && process.env\n}\n\n/**\n *\n * @param service auth | storage | graphql | functions\n * @returns the service's url if the corresponding env var is set\n * NHOST_${service}_URL\n */\nfunction getValueFromEnv(service: string) {\n  if (isBrowser() || !environmentIsAvailable()) {\n    return null\n  }\n\n  return process.env[`NHOST_${service.toUpperCase()}_URL`]\n}\n\n/**\n * Combines a base URL and a path into a single URL string.\n *\n * @param baseUrl - The base URL to use.\n * @param path - The path to append to the base URL.\n * @returns The combined URL string.\n */\nexport function buildUrl(baseUrl: string, path: string) {\n  const hasLeadingSlash = path.startsWith('/')\n  const urlPath = hasLeadingSlash ? path : `/${path}`\n  return baseUrl + urlPath\n}\n","import { HasuraAuthClient } from '@nhost/hasura-auth-js'\n\nimport { urlFromSubdomain } from '../utils/helpers'\nimport { NhostClientConstructorParams } from '../utils/types'\n\n/**\n * Creates a client for Auth from either a subdomain or a URL\n */\nexport function createAuthClient(params: NhostClientConstructorParams) {\n  const authUrl = 'subdomain' in params ? urlFromSubdomain(params, 'auth') : params.authUrl\n\n  if (!authUrl) {\n    throw new Error('Please provide `subdomain` or `authUrl`.')\n  }\n\n  return new HasuraAuthClient({ url: authUrl, ...params })\n}\n","import fetch from 'isomorphic-unfetch'\nimport { buildUrl, urlFromSubdomain } from '../../utils/helpers'\nimport { NhostClientConstructorParams } from '../../utils/types'\nimport {\n  NhostFunctionCallConfig,\n  NhostFunctionCallResponse,\n  NhostFunctionsConstructorParams\n} from './types'\n/**\n * Creates a client for Functions from either a subdomain or a URL\n */\nexport function createFunctionsClient(params: NhostClientConstructorParams) {\n  const functionsUrl =\n    'subdomain' in params ? urlFromSubdomain(params, 'functions') : params.functionsUrl\n\n  if (!functionsUrl) {\n    throw new Error('Please provide `subdomain` or `functionsUrl`.')\n  }\n\n  return new NhostFunctionsClient({ url: functionsUrl, ...params })\n}\n\n/**\n * @alias Functions\n */\nexport class NhostFunctionsClient {\n  readonly url: string\n  private accessToken: string | null\n  private adminSecret?: string\n  private headers: Record<string, string> = {}\n\n  constructor(params: NhostFunctionsConstructorParams) {\n    const { url, adminSecret } = params\n\n    this.url = url\n    this.accessToken = null\n    this.adminSecret = adminSecret\n  }\n\n  /**\n   * Use `nhost.functions.call` to call (sending a POST request to) a serverless function. Use generic\n   * types to specify the expected response data, request body and error message.\n   *\n   * @example\n   * ### Without generic types\n   * ```ts\n   * await nhost.functions.call('send-welcome-email', { email: 'joe@example.com', name: 'Joe Doe' })\n   * ```\n   *\n   * @example\n   * ### Using generic types\n   * ```ts\n   * type Data = {\n   *   message: string\n   * }\n   *\n   * type Body = {\n   *   email: string\n   *   name: string\n   * }\n   *\n   * type ErrorMessage = {\n   *   details: string\n   * }\n   *\n   * // The function will only accept a body of type `Body`\n   * const { res, error } = await nhost.functions.call<Data, Body, ErrorMessage>(\n   *   'send-welcome-email',\n   *   { email: 'joe@example.com', name: 'Joe Doe' }\n   * )\n   *\n   * // Now the response data is typed as `Data`\n   * console.log(res?.data.message)\n   *\n   * // Now the error message is typed as `ErrorMessage`\n   * console.log(error?.message.details)\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/functions/call\n   */\n  async call<TData = unknown, TBody = any, TErrorMessage = any>(\n    url: string,\n    body?: TBody | null,\n    config?: NhostFunctionCallConfig\n  ): Promise<NhostFunctionCallResponse<TData, TErrorMessage>> {\n    const headers: HeadersInit = {\n      'Content-Type': 'application/json',\n      ...this.generateAccessTokenHeaders(),\n      ...config?.headers,\n      ...this.headers // nhost functions client headers to be sent with all calls\n    }\n\n    const fullUrl = buildUrl(this.url, url)\n\n    try {\n      const result = await fetch(fullUrl, {\n        body: body ? JSON.stringify(body) : null,\n        headers,\n        method: 'POST'\n      })\n\n      if (!result.ok) {\n        let message: TErrorMessage\n\n        if (result.headers.get('content-type')?.includes('application/json')) {\n          message = await result.json()\n        } else {\n          message = (await result.text()) as unknown as TErrorMessage\n        }\n\n        return {\n          res: null,\n          error: {\n            message,\n            error: result.statusText,\n            status: result.status\n          }\n        }\n      }\n\n      let data: TData\n\n      if (result.headers.get('content-type')?.includes('application/json')) {\n        data = await result.json()\n      } else {\n        data = (await result.text()) as unknown as TData\n      }\n\n      return {\n        res: { data, status: result.status, statusText: result.statusText },\n        error: null\n      }\n    } catch (e) {\n      const error = e as Error\n      return {\n        res: null,\n        error: {\n          message: error.message as unknown as TErrorMessage,\n          status: error.name === 'AbortError' ? 0 : 500,\n          error: error.name === 'AbortError' ? 'abort-error' : 'unknown'\n        }\n      }\n    }\n  }\n\n  /**\n   * Use `nhost.functions.setAccessToken` to a set an access token to be used in subsequent functions requests. Note that if you're signin in users with `nhost.auth.signIn()` the access token will be set automatically.\n   *\n   * @example\n   * ```ts\n   * nhost.functions.setAccessToken('some-access-token')\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/functions/set-access-token\n   */\n  setAccessToken(accessToken: string | undefined) {\n    if (!accessToken) {\n      this.accessToken = null\n      return\n    }\n\n    this.accessToken = accessToken\n  }\n\n  /**\n   * Use `nhost.functions.getHeaders` to get the global headers sent with all functions requests.\n   *\n   * @example\n   * ```ts\n   * nhost.functions.getHeaders()\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/functions/get-headers\n   */\n  getHeaders(): Record<string, string> {\n    return this.headers\n  }\n\n  /**\n   * Use `nhost.functions.setHeaders` to a set global headers to be sent in all subsequent functions requests.\n   *\n   * @example\n   * ```ts\n   * nhost.functions.setHeaders({\n   *  'x-hasura-role': 'admin'\n   * })\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/functions/set-headers\n   */\n  setHeaders(headers?: Record<string, string>) {\n    if (!headers) {\n      return\n    }\n\n    this.headers = {\n      ...this.headers,\n      ...headers\n    }\n  }\n\n  /**\n   * Use `nhost.functions.unsetHeaders` to a unset global headers sent with all functions requests.\n   *\n   * @example\n   * ```ts\n   * nhost.functions.unsetHeaders()\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/functions/unset-headers\n   */\n  unsetHeaders() {\n    const userRole = this.headers['x-hasura-role']\n\n    // preserve the user role header to avoid invalidating preceding 'setRole' call.\n    this.headers = userRole ? { 'x-hasura-role': userRole } : {}\n  }\n\n  generateAccessTokenHeaders(): NhostFunctionCallConfig['headers'] {\n    if (this.adminSecret) {\n      return {\n        'x-hasura-admin-secret': this.adminSecret\n      }\n    }\n    if (this.accessToken) {\n      return {\n        Authorization: `Bearer ${this.accessToken}`\n      }\n    }\n    return {}\n  }\n}\n","import { NhostGraphqlClient } from '@nhost/graphql-js'\nimport { urlFromSubdomain } from '../utils/helpers'\nimport { NhostClientConstructorParams } from '../utils/types'\n\n/**\n * Creates a client for GraphQL from either a subdomain or a URL\n */\nexport function createGraphqlClient(params: NhostClientConstructorParams) {\n  const graphqlUrl = 'subdomain' in params ? urlFromSubdomain(params, 'graphql') : params.graphqlUrl\n\n  if (!graphqlUrl) {\n    throw new Error('Please provide `subdomain` or `graphqlUrl`.')\n  }\n\n  return new NhostGraphqlClient({ url: graphqlUrl, ...params })\n}\n","import { HasuraStorageClient } from '@nhost/hasura-storage-js'\n\nimport { urlFromSubdomain } from '../utils/helpers'\nimport { NhostClientConstructorParams } from '../utils/types'\n\n/**\n * Creates a client for Storage from either a subdomain or a URL\n */\nexport function createStorageClient(params: NhostClientConstructorParams) {\n  const storageUrl = 'subdomain' in params ? urlFromSubdomain(params, 'storage') : params.storageUrl\n\n  if (!storageUrl) {\n    throw new Error('Please provide `subdomain` or `storageUrl`.')\n  }\n\n  return new HasuraStorageClient({ url: storageUrl, ...params })\n}\n","import { NhostGraphqlClient } from '@nhost/graphql-js'\nimport { HasuraAuthClient } from '@nhost/hasura-auth-js'\nimport { HasuraStorageClient } from '@nhost/hasura-storage-js'\nimport { NhostClientConstructorParams } from '../utils/types'\nimport { createAuthClient } from './auth'\nimport { createFunctionsClient, NhostFunctionsClient } from './functions'\nimport { createGraphqlClient } from './graphql'\nimport { createStorageClient } from './storage'\n\nexport const createNhostClient = (params: NhostClientConstructorParams) => new NhostClient(params)\n\nexport class NhostClient {\n  auth: HasuraAuthClient\n  storage: HasuraStorageClient\n  functions: NhostFunctionsClient\n  graphql: NhostGraphqlClient\n  private _adminSecret?: string\n  readonly devTools?: boolean\n\n  /**\n   *\n   * @example\n   * ```ts\n   * // Create a new Nhost client from subdomain and region.\n   * const nhost = new NhostClient({ subdomain, region });\n   * ```\n   *\n   *\n   * ```ts\n   * // Create a new Nhost client from individual service URLs (custom domains, self-hosting, etc).\n   * const nhost = new NhostClient({ \n   *   authUrl: \"my-auth-service-url\",\n   *   storageUrl: \"my-storage-service-url\",\n   *   graphqlUrl: \"my-graphql-service-url\",\n   *   functionsUrl: \"my-functions-service-url\",\n   * });\n   * ```\n   *\n   *\n   * ```ts\n   * // Create a new Nhost client for local development.\n   * const nhost = new NhostClient({ subdomain: \"local\" });\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript\n   */\n  constructor({\n    refreshIntervalTime,\n    clientStorage,\n    clientStorageType,\n    autoRefreshToken,\n    autoSignIn,\n    adminSecret,\n    devTools,\n    start = true,\n    ...urlParams\n  }: NhostClientConstructorParams) {\n    // * Set clients for all services\n    this.auth = createAuthClient({\n      refreshIntervalTime,\n      clientStorage,\n      clientStorageType,\n      autoRefreshToken,\n      autoSignIn,\n      start,\n      ...urlParams\n    })\n    this.storage = createStorageClient({ adminSecret, ...urlParams })\n    this.functions = createFunctionsClient({ adminSecret, ...urlParams })\n    this.graphql = createGraphqlClient({ adminSecret, ...urlParams })\n\n    this.auth.onAuthStateChanged((event, session) => {\n      if (event === 'SIGNED_OUT') {\n        this.storage.setAccessToken(undefined)\n        this.functions.setAccessToken(undefined)\n        this.graphql.setAccessToken(undefined)\n\n        return\n      }\n\n      const accessToken = session?.accessToken\n      this.storage.setAccessToken(accessToken)\n      this.functions.setAccessToken(accessToken)\n      this.graphql.setAccessToken(accessToken)\n    })\n\n    // * Update access token for clients, including when signin in\n    this.auth.onTokenChanged((session) => {\n      const accessToken = session?.accessToken\n      this.storage.setAccessToken(accessToken)\n      this.functions.setAccessToken(accessToken)\n      this.graphql.setAccessToken(accessToken)\n    })\n\n    this._adminSecret = adminSecret\n    this.devTools = devTools\n  }\n\n  get adminSecret(): string | undefined {\n    return this._adminSecret\n  }\n\n  set adminSecret(newValue: string | undefined) {\n    this._adminSecret = newValue\n    this.storage.setAdminSecret(newValue)\n    // TODO inconsistent API: storage can change admin secret, but functions/graphql cannot\n    // this.functions.setAdminSecret(newValue)\n    // this.graphql.setAdminSecret(newValue)\n  }\n\n  /**\n   * Use `nhost.setRole` to set the user role for all subsequent GraphQL, storage, and functions calls.\n   * Underneath, this method sets the `x-hasura-role` header on the graphql, storage,\n   * and functions clients.\n   *\n   * ```ts\n   * nhost.graphql.setHeaders({ 'x-hasura-role': role })\n   * nhost.storage.setHeaders({ 'x-hasura-role': role })\n   * nhost.functions.setHeaders({ 'x-hasura-role': role })\n   * ```\n   *\n   * Note: Exercise caution when mixing the use of `setRole` along with `setHeaders` when setting the\n   * `x-hasura-role` header, as the last call will override any previous ones.\n   *\n   * @example\n   * ```ts\n   * nhost.setRole('admin')\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/set-role\n   */\n  setRole(role: string) {\n    this.graphql.setHeaders({ 'x-hasura-role': role })\n    this.storage.setHeaders({ 'x-hasura-role': role })\n    this.functions.setHeaders({ 'x-hasura-role': role })\n  }\n\n  /**\n   * Use `nhost.unsetRole` to unset the user role for all subsequent graphql, storage and functions calls.\n   * Underneath, this method removes the `x-hasura-role` header from the graphql, storage and functions clients.\n   *\n   * Note: Exercise caution when mixing the use of `unsetRole` along with `setHeaders` when setting the\n   * `x-hasura-role` header, as the last call will override any previous ones.\n   *\n   * @example\n   * ```ts\n   * nhost.unsetRole()\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/nhost-js/unset-role\n   */\n  unsetRole() {\n    this.graphql.setHeaders((({ 'x-hasura-role': _, ...rest }) => rest)(this.graphql.getHeaders()))\n    this.storage.setHeaders((({ 'x-hasura-role': _, ...rest }) => rest)(this.storage.getHeaders()))\n    this.functions.setHeaders(\n      (({ 'x-hasura-role': _, ...rest }) => rest)(this.functions.getHeaders())\n    )\n  }\n}\n"],"names":["LOCALHOST_REGEX","urlFromSubdomain","subdomainAndRegion","service","subdomain","region","subdomainLocalhostFound","protocol","host","port","urlFromEnv","getValueFromEnv","isBrowser","environmentIsAvailable","buildUrl","baseUrl","path","urlPath","createAuthClient","params","authUrl","HasuraAuthClient","createFunctionsClient","functionsUrl","NhostFunctionsClient","url","adminSecret","body","config","headers","fullUrl","result","fetch","message","_a","data","_b","e","error","accessToken","userRole","createGraphqlClient","graphqlUrl","NhostGraphqlClient","createStorageClient","storageUrl","HasuraStorageClient","createNhostClient","NhostClient","refreshIntervalTime","clientStorage","clientStorageType","autoRefreshToken","autoSignIn","devTools","start","urlParams","event","session","newValue","role","_","rest"],"mappings":";;;;;;AAGO,MAAMA,IACX;AASc,SAAAC,EACdC,GACAC,GACQ;AACF,QAAA,EAAE,WAAAC,GAAW,QAAAC,EAAW,IAAAH;AAE9B,MAAI,CAACE;AACG,UAAA,IAAI,MAAM,4BAA4B;AAIxC,QAAAE,IAA0BF,EAAU,MAAMJ,CAAe;AAC/D,MAAIM,KAAA,QAAAA,EAAyB,QAAQ;AACnC,UAAM,EAAE,UAAAC,GAAU,MAAAC,GAAM,MAAAC,EAAA,IAASH,EAAwB,QAEnDI,IAAaC,EAAgBR,CAAO;AAC1C,WAAIO,MAIAF,MAAS,eACH,QAAA;AAAA,MACN;AAAA,IAAA,GAGK,GAAGD,KAAY,MAAM,gBAAgBE,KAAQ,IAAI,OAAON,CAAO,MAGjEM,IACH,GAAGF,KAAY,OAAO,YAAYJ,CAAO,cAAcM,CAAI,QAC3D,GAAGF,KAAY,OAAO,YAAYJ,CAAO;AAAA,EAC/C;AAEA,MAAI,CAACE;AACG,UAAA,IAAI,MAAM,mEAAmE;AAGrF,SAAO,WAAWD,CAAS,IAAID,CAAO,IAAIE,CAAM;AAClD;AAMA,SAASO,IAAqB;AAC5B,SAAO,OAAO,UAAW;AAC3B;AAMA,SAASC,IAAyB;AACzB,SAAA,OAAO,WAAY,eAAe,QAAQ;AACnD;AAQA,SAASF,EAAgBR,GAAiB;AACxC,SAAIS,EAAU,KAAK,CAACC,MACX,OAGF,QAAQ,IAAI,SAASV,EAAQ,YAAa,CAAA,MAAM;AACzD;AASgB,SAAAW,EAASC,GAAiBC,GAAc;AAEtD,QAAMC,IADkBD,EAAK,WAAW,GAAG,IACTA,IAAO,IAAIA,CAAI;AACjD,SAAOD,IAAUE;AACnB;ACtFO,SAASC,EAAiBC,GAAsC;AACrE,QAAMC,IAAU,eAAeD,IAASlB,EAAiBkB,GAAQ,MAAM,IAAIA,EAAO;AAElF,MAAI,CAACC;AACG,UAAA,IAAI,MAAM,0CAA0C;AAG5D,SAAO,IAAIC,EAAiB,EAAE,KAAKD,GAAS,GAAGD,GAAQ;AACzD;ACLO,SAASG,EAAsBH,GAAsC;AAC1E,QAAMI,IACJ,eAAeJ,IAASlB,EAAiBkB,GAAQ,WAAW,IAAIA,EAAO;AAEzE,MAAI,CAACI;AACG,UAAA,IAAI,MAAM,+CAA+C;AAGjE,SAAO,IAAIC,EAAqB,EAAE,KAAKD,GAAc,GAAGJ,GAAQ;AAClE;AAKO,MAAMK,EAAqB;AAAA,EAMhC,YAAYL,GAAyC;AAFrD,SAAQ,UAAkC;AAGlC,UAAA,EAAE,KAAAM,GAAK,aAAAC,EAAgB,IAAAP;AAE7B,SAAK,MAAMM,GACX,KAAK,cAAc,MACnB,KAAK,cAAcC;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA2CA,MAAM,KACJD,GACAE,GACAC,GAC0D;;AAC1D,UAAMC,IAAuB;AAAA,MAC3B,gBAAgB;AAAA,MAChB,GAAG,KAAK,2BAA2B;AAAA,MACnC,GAAGD,KAAA,gBAAAA,EAAQ;AAAA,MACX,GAAG,KAAK;AAAA;AAAA,IAAA,GAGJE,IAAUhB,EAAS,KAAK,KAAKW,CAAG;AAElC,QAAA;AACI,YAAAM,IAAS,MAAMC,EAAMF,GAAS;AAAA,QAClC,MAAMH,IAAO,KAAK,UAAUA,CAAI,IAAI;AAAA,QACpC,SAAAE;AAAA,QACA,QAAQ;AAAA,MAAA,CACT;AAEG,UAAA,CAACE,EAAO,IAAI;AACV,YAAAE;AAEJ,gBAAIC,IAAAH,EAAO,QAAQ,IAAI,cAAc,MAAjC,QAAAG,EAAoC,SAAS,sBACrCD,IAAA,MAAMF,EAAO,SAEZE,IAAA,MAAMF,EAAO,QAGnB;AAAA,UACL,KAAK;AAAA,UACL,OAAO;AAAA,YACL,SAAAE;AAAA,YACA,OAAOF,EAAO;AAAA,YACd,QAAQA,EAAO;AAAA,UACjB;AAAA,QAAA;AAAA,MAEJ;AAEI,UAAAI;AAEJ,cAAIC,IAAAL,EAAO,QAAQ,IAAI,cAAc,MAAjC,QAAAK,EAAoC,SAAS,sBACxCD,IAAA,MAAMJ,EAAO,SAEZI,IAAA,MAAMJ,EAAO,QAGhB;AAAA,QACL,KAAK,EAAE,MAAAI,GAAM,QAAQJ,EAAO,QAAQ,YAAYA,EAAO,WAAW;AAAA,QAClE,OAAO;AAAA,MAAA;AAAA,aAEFM,GAAG;AACV,YAAMC,IAAQD;AACP,aAAA;AAAA,QACL,KAAK;AAAA,QACL,OAAO;AAAA,UACL,SAASC,EAAM;AAAA,UACf,QAAQA,EAAM,SAAS,eAAe,IAAI;AAAA,UAC1C,OAAOA,EAAM,SAAS,eAAe,gBAAgB;AAAA,QACvD;AAAA,MAAA;AAAA,IAEJ;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,eAAeC,GAAiC;AAC9C,QAAI,CAACA,GAAa;AAChB,WAAK,cAAc;AACnB;AAAA,IACF;AAEA,SAAK,cAAcA;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,aAAqC;AACnC,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,WAAWV,GAAkC;AAC3C,IAAKA,MAIL,KAAK,UAAU;AAAA,MACb,GAAG,KAAK;AAAA,MACR,GAAGA;AAAA,IAAA;AAAA,EAEP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,eAAe;AACP,UAAAW,IAAW,KAAK,QAAQ,eAAe;AAG7C,SAAK,UAAUA,IAAW,EAAE,iBAAiBA,MAAa;EAC5D;AAAA,EAEA,6BAAiE;AAC/D,WAAI,KAAK,cACA;AAAA,MACL,yBAAyB,KAAK;AAAA,IAAA,IAG9B,KAAK,cACA;AAAA,MACL,eAAe,UAAU,KAAK,WAAW;AAAA,IAAA,IAGtC;EACT;AACF;AChOO,SAASC,EAAoBtB,GAAsC;AACxE,QAAMuB,IAAa,eAAevB,IAASlB,EAAiBkB,GAAQ,SAAS,IAAIA,EAAO;AAExF,MAAI,CAACuB;AACG,UAAA,IAAI,MAAM,6CAA6C;AAG/D,SAAO,IAAIC,EAAmB,EAAE,KAAKD,GAAY,GAAGvB,GAAQ;AAC9D;ACPO,SAASyB,EAAoBzB,GAAsC;AACxE,QAAM0B,IAAa,eAAe1B,IAASlB,EAAiBkB,GAAQ,SAAS,IAAIA,EAAO;AAExF,MAAI,CAAC0B;AACG,UAAA,IAAI,MAAM,6CAA6C;AAG/D,SAAO,IAAIC,EAAoB,EAAE,KAAKD,GAAY,GAAG1B,GAAQ;AAC/D;ACPO,MAAM4B,IAAoB,CAAC5B,MAAyC,IAAI6B,EAAY7B,CAAM;AAE1F,MAAM6B,EAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmCvB,YAAY;AAAA,IACV,qBAAAC;AAAA,IACA,eAAAC;AAAA,IACA,mBAAAC;AAAA,IACA,kBAAAC;AAAA,IACA,YAAAC;AAAA,IACA,aAAA3B;AAAA,IACA,UAAA4B;AAAA,IACA,OAAAC,IAAQ;AAAA,IACR,GAAGC;AAAA,EAAA,GAC4B;AAE/B,SAAK,OAAOtC,EAAiB;AAAA,MAC3B,qBAAA+B;AAAA,MACA,eAAAC;AAAA,MACA,mBAAAC;AAAA,MACA,kBAAAC;AAAA,MACA,YAAAC;AAAA,MACA,OAAAE;AAAA,MACA,GAAGC;AAAA,IAAA,CACJ,GACD,KAAK,UAAUZ,EAAoB,EAAE,aAAAlB,GAAa,GAAG8B,GAAW,GAChE,KAAK,YAAYlC,EAAsB,EAAE,aAAAI,GAAa,GAAG8B,GAAW,GACpE,KAAK,UAAUf,EAAoB,EAAE,aAAAf,GAAa,GAAG8B,GAAW,GAEhE,KAAK,KAAK,mBAAmB,CAACC,GAAOC,MAAY;AAC/C,UAAID,MAAU,cAAc;AACrB,aAAA,QAAQ,eAAe,MAAS,GAChC,KAAA,UAAU,eAAe,MAAS,GAClC,KAAA,QAAQ,eAAe,MAAS;AAErC;AAAA,MACF;AAEA,YAAMlB,IAAcmB,KAAA,gBAAAA,EAAS;AACxB,WAAA,QAAQ,eAAenB,CAAW,GAClC,KAAA,UAAU,eAAeA,CAAW,GACpC,KAAA,QAAQ,eAAeA,CAAW;AAAA,IAAA,CACxC,GAGI,KAAA,KAAK,eAAe,CAACmB,MAAY;AACpC,YAAMnB,IAAcmB,KAAA,gBAAAA,EAAS;AACxB,WAAA,QAAQ,eAAenB,CAAW,GAClC,KAAA,UAAU,eAAeA,CAAW,GACpC,KAAA,QAAQ,eAAeA,CAAW;AAAA,IAAA,CACxC,GAED,KAAK,eAAeb,GACpB,KAAK,WAAW4B;AAAA,EAClB;AAAA,EAEA,IAAI,cAAkC;AACpC,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,YAAYK,GAA8B;AAC5C,SAAK,eAAeA,GACf,KAAA,QAAQ,eAAeA,CAAQ;AAAA,EAItC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuBA,QAAQC,GAAc;AACpB,SAAK,QAAQ,WAAW,EAAE,iBAAiBA,EAAM,CAAA,GACjD,KAAK,QAAQ,WAAW,EAAE,iBAAiBA,EAAM,CAAA,GACjD,KAAK,UAAU,WAAW,EAAE,iBAAiBA,EAAM,CAAA;AAAA,EACrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,YAAY;AACV,SAAK,QAAQ,YAAY,CAAC,EAAE,iBAAiBC,GAAG,GAAGC,EAAK,MAAMA,GAAM,KAAK,QAAQ,WAAA,CAAY,CAAC,GAC9F,KAAK,QAAQ,YAAY,CAAC,EAAE,iBAAiBD,GAAG,GAAGC,EAAK,MAAMA,GAAM,KAAK,QAAQ,WAAA,CAAY,CAAC,GAC9F,KAAK,UAAU;AAAA,OACZ,CAAC,EAAE,iBAAiBD,GAAG,GAAGC,QAAWA,GAAM,KAAK,UAAU,YAAY;AAAA,IAAA;AAAA,EAE3E;AACF;"}