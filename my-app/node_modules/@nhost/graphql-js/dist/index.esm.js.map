{"version":3,"file":"index.esm.js","sources":["../src/parse-args.ts","../src/resolve-request-document.ts","../src/client.ts"],"sourcesContent":["import { RequestDocument, RequestOptions, Variables } from './types'\n\nexport function parseRequestArgs<V extends Variables = Variables>(\n  documentOrOptions: RequestDocument | RequestOptions<V>,\n  variables?: V,\n  config?: RequestInit\n): RequestOptions<V> {\n  return (\n    (documentOrOptions as RequestOptions<V>).document\n      ? documentOrOptions\n      : {\n          document: documentOrOptions,\n          variables,\n          config\n        }\n  ) as RequestOptions<V>\n}\n","import { DocumentNode, OperationDefinitionNode, parse, print } from 'graphql'\nimport { RequestDocument } from './types'\n\n/**\n * helpers\n */\n\nfunction extractOperationName(document: DocumentNode): string | undefined {\n  let operationName = undefined\n\n  const operationDefinitions = document.definitions.filter(\n    (definition) => definition.kind === 'OperationDefinition'\n  ) as OperationDefinitionNode[]\n\n  if (operationDefinitions.length === 1) {\n    operationName = operationDefinitions[0].name?.value\n  }\n\n  return operationName\n}\n\nexport function resolveRequestDocument(document: RequestDocument): {\n  query: string\n  operationName?: string\n} {\n  if (typeof document === 'string') {\n    let operationName = undefined\n\n    try {\n      const parsedDocument = parse(document)\n      operationName = extractOperationName(parsedDocument)\n    } catch (err) {\n      // Failed parsing the document, the operationName will be undefined\n    }\n\n    return { query: document, operationName }\n  }\n\n  const operationName = extractOperationName(document)\n\n  return { query: print(document), operationName }\n}\n","import { TypedDocumentNode } from '@graphql-typed-document-node/core'\nimport fetch from 'isomorphic-unfetch'\nimport { parseRequestArgs } from './parse-args'\nimport { resolveRequestDocument } from './resolve-request-document'\nimport {\n  NhostGraphqlConstructorParams,\n  NhostGraphqlRequestConfig,\n  NhostGraphqlRequestResponse,\n  RemoveIndex,\n  RequestDocument,\n  RequestOptions,\n  Variables\n} from './types'\n\nimport { jwtDecode, JwtPayload } from 'jwt-decode'\n\n/**\n * @alias GraphQL\n */\nexport class NhostGraphqlClient {\n  readonly _url: string\n  private accessToken: string | null\n  private adminSecret?: string\n  private headers: Record<string, string> = {}\n\n  constructor(params: NhostGraphqlConstructorParams) {\n    const { url, adminSecret } = params\n\n    this._url = url\n    this.accessToken = null\n    this.adminSecret = adminSecret\n  }\n\n  private isAccessTokenValidOrNull = () => {\n    if (!this.accessToken) {\n      return true\n    }\n\n    try {\n      const decodedToken = jwtDecode(this.accessToken) as JwtPayload\n      return decodedToken.exp != null && decodedToken.exp * 1000 > Date.now()\n    } catch (error) {\n      console.error('Error decoding token:', error)\n      return false\n    }\n  }\n\n  private awaitForValidAccessTokenOrNull = async () => {\n    if (this.isAccessTokenValidOrNull()) {\n      return true\n    }\n\n    const waitForValidTokenOrNull = () => {\n      if (this.isAccessTokenValidOrNull()) {\n        return Promise.resolve(true)\n      }\n      return new Promise((resolve) => {\n        setTimeout(() => waitForValidTokenOrNull().then(resolve), 100)\n      })\n    }\n\n    return waitForValidTokenOrNull()\n  }\n\n  /**\n   * Use `nhost.graphql.request` to send a GraphQL request. For more serious GraphQL usage we recommend using a GraphQL client such as Apollo Client (https://www.apollographql.com/docs/react).\n   *\n   * @example\n   * ```ts\n   * const CUSTOMERS = gql`\n   *  query {\n   *   customers {\n   *    id\n   *    name\n   *  }\n   * }\n   * `\n   * const { data, error } = await nhost.graphql.request(CUSTOMERS)\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/graphql/request\n   */\n  request<T = any, V = Variables>(\n    document: RequestDocument | TypedDocumentNode<T, V>,\n    ...variablesAndRequestHeaders: V extends Record<any, never>\n      ? [variables?: V, config?: NhostGraphqlRequestConfig]\n      : keyof RemoveIndex<V> extends never\n      ? [variables?: V, config?: NhostGraphqlRequestConfig]\n      : [variables: V, config?: NhostGraphqlRequestConfig]\n  ): Promise<NhostGraphqlRequestResponse<T>>\n  async request<T = any, V extends Variables = Variables>(\n    options: RequestOptions<V, T>\n  ): Promise<NhostGraphqlRequestResponse<T>>\n  async request<T = any, V extends Variables = Variables>(\n    documentOrOptions: RequestDocument | TypedDocumentNode<T, V> | RequestOptions<V>,\n    ...variablesAndRequestHeaders: V extends Record<any, never>\n      ? [variables?: V, config?: NhostGraphqlRequestConfig]\n      : keyof RemoveIndex<V> extends never\n      ? [variables?: V, config?: NhostGraphqlRequestConfig]\n      : [variables: V, config?: NhostGraphqlRequestConfig]\n  ): Promise<NhostGraphqlRequestResponse<T>> {\n    const [variables, config] = variablesAndRequestHeaders\n    const requestOptions = parseRequestArgs(documentOrOptions, variables, config)\n\n    const { headers: extraHeaders, ...otherOptions } = config || {}\n    const { query, operationName } = resolveRequestDocument(requestOptions.document)\n\n    if (typeof process !== 'undefined' && !process.env.TEST_MODE) {\n      // We skip this while running unit tests because the accessToken is generated using faker\n      await this.awaitForValidAccessTokenOrNull()\n    }\n\n    try {\n      const response = await fetch(this.httpUrl, {\n        method: 'POST',\n        body: JSON.stringify({\n          operationName,\n          query,\n          variables\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n          ...this.generateAccessTokenHeaders(),\n          ...this.headers, // graphql client headers to be sent with all `request` calls\n          ...extraHeaders // extra headers to be sent with a specific call\n        },\n        ...otherOptions\n      })\n      if (!response.ok) {\n        return {\n          data: null,\n          error: {\n            error: response.statusText,\n            message: response.statusText,\n            status: response.status\n          }\n        }\n      }\n      const { data, errors } = await response.json()\n\n      if (errors) {\n        return {\n          data: null,\n          error: errors\n        }\n      }\n      if (typeof data !== 'object' || Array.isArray(data) || data === null) {\n        return {\n          data: null,\n          error: {\n            error: 'invalid-response',\n            message: 'incorrect response data from GraphQL server',\n            status: 0\n          }\n        }\n      }\n\n      return { data, error: null }\n    } catch (e) {\n      const error = e as Error\n      return {\n        data: null,\n        error: {\n          message: error.message,\n          status: error.name === 'AbortError' ? 0 : 500,\n          error: error.name === 'AbortError' ? 'abort-error' : 'unknown'\n        }\n      }\n    }\n  }\n\n  /**\n   * Use `nhost.graphql.httpUrl` to get the GraphQL HTTP URL.\n   * @example\n   * ```ts\n   * const url = nhost.graphql.httpUrl;\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/graphql/get-http-url\n   */\n  get httpUrl(): string {\n    return this._url\n  }\n\n  /**\n   * Use `nhost.graphql.wsUrl` to get the GraphQL WebSocket URL.\n   * @example\n   * ```ts\n   * const url = nhost.graphql.wsUrl;\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/graphql/get-ws-url\n   */\n  get wsUrl(): string {\n    return this._url.replace(/^(http)(s?):\\/\\//, 'ws$2://')\n  }\n\n  /**\n   * Use `nhost.graphql.url` to get the GraphQL URL.\n   * @deprecated Use `nhost.graphql.httpUrl` and `nhost.graphql.wsUrl` instead.\n   */\n  get url(): string {\n    return this._url\n  }\n\n  /**\n   * Use `nhost.graphql.getUrl()` to get the GraphQL URL.\n   * @deprecated Use `nhost.graphql.httpUrl` and `nhost.graphql.wsUrl` instead.\n   */\n  getUrl(): string {\n    return this._url\n  }\n\n  /**\n   * Use `nhost.graphql.setAccessToken` to a set an access token to be used in subsequent graphql requests. Note that if you're signin in users with `nhost.auth.signIn()` the access token will be set automatically.\n   *\n   * @example\n   * ```ts\n   * nhost.graphql.setAccessToken('some-access-token')\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/graphql/set-access-token\n   */\n  setAccessToken(accessToken: string | undefined) {\n    if (!accessToken) {\n      this.accessToken = null\n      return\n    }\n\n    this.accessToken = accessToken\n  }\n\n  /**\n   * Use `nhost.graphql.getHeaders` to get the global headers sent with all graphql requests\n   *\n   * @example\n   * ```ts\n   * nhost.graphql.getHeaders()\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/graphql/get-headers\n   */\n  getHeaders(): Record<string, string> {\n    return this.headers\n  }\n\n  /**\n   * Use `nhost.graphql.setHeaders` to set global headers to be sent in all subsequent graphql requests\n   *\n   * @example\n   * ```ts\n   * nhost.graphql.setHeaders({\n   *  'x-hasura-role': 'admin'\n   * })\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/graphql/set-headers\n   */\n  setHeaders(headers?: Record<string, string>) {\n    if (!headers) {\n      return\n    }\n\n    this.headers = {\n      ...this.headers,\n      ...headers\n    }\n  }\n\n  /**\n   * Use `nhost.graphql.unsetHeaders` to remove global headers sent with all requests, except for the role header to preserve\n   * the role set by 'setRole' method.\n   *\n   * @example\n   * ```ts\n   * nhost.graphql.unsetHeaders()\n   * ```\n   *\n   * @docs https://docs.nhost.io/reference/javascript/graphql/unset-headers\n   */\n  unsetHeaders() {\n    const userRole = this.headers['x-hasura-role']\n\n    // preserve the user role header to avoid invalidating preceding 'setRole' call.\n    this.headers = userRole ? { 'x-hasura-role': userRole } : {}\n  }\n\n  private generateAccessTokenHeaders(): NhostGraphqlRequestConfig['headers'] {\n    if (this.adminSecret) {\n      return {\n        'x-hasura-admin-secret': this.adminSecret\n      }\n    }\n    if (this.accessToken) {\n      return {\n        Authorization: `Bearer ${this.accessToken}`\n      }\n    }\n    return {}\n  }\n}\n"],"names":["parseRequestArgs","documentOrOptions","variables","config","extractOperationName","document","operationName","operationDefinitions","definition","_a","resolveRequestDocument","parsedDocument","parse","print","NhostGraphqlClient","params","decodedToken","jwtDecode","error","waitForValidTokenOrNull","resolve","url","adminSecret","variablesAndRequestHeaders","requestOptions","extraHeaders","otherOptions","query","response","fetch","data","errors","e","accessToken","headers","userRole"],"mappings":"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"}