import { SignUpEmailPasswordState, SignUpOptions } from '@nhost/nhost-js';

type SignUpEmailPasswordHandlerResult = Omit<SignUpEmailPasswordState, 'isLoading'>;
interface SignUpEmailPasswordHandler {
    (email: string, password: string, options?: SignUpOptions): Promise<SignUpEmailPasswordHandlerResult>;
}
export interface SignUpEmailPasswordHookResult extends SignUpEmailPasswordState {
    /** Used for a new user to sign up. Returns a promise with the current context */
    signUpEmailPassword: SignUpEmailPasswordHandler;
}
interface SignUpEmailPasswordHook {
    (options?: SignUpOptions): SignUpEmailPasswordHookResult;
}
/**
 * Use the hook `useSignUpEmailPassword` to sign up a user using email and password.
 *
 * @example
 * ```tsx
 * const { signUpEmailPassword, needsEmailVerification, isLoading, isSuccess, isError, error } = useSignUpEmailPassword()
 *
 * console.log({ needsEmailVerification, isLoading, isSuccess, isError, error });
 *
 * const handleFormSubmit = async (e) => {
 *   e.preventDefault();
 *
 *   await signUpEmailPassword('joe@example.com','secret-password')
 * }
 * ```
 *
 * @docs https://docs.nhost.io/reference/react/use-sign-up-email-password
 */
export declare const useSignUpEmailPassword: SignUpEmailPasswordHook;
export {};
//# sourceMappingURL=useSignUpEmailPassword.d.ts.map