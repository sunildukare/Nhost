import { SignUpOptions } from '../types';
import { AuthActionLoadingState, NeedsEmailVerificationState, SessionActionHandlerResult } from './types';

export interface SignUpEmailPasswordHandlerResult extends SessionActionHandlerResult, NeedsEmailVerificationState {
}
export interface SignUpEmailPasswordState extends SignUpEmailPasswordHandlerResult, AuthActionLoadingState {
}
export declare const signUpEmailPasswordPromise: (interpreter: import('xstate').Interpreter<import('../machines').AuthContext, any, {
    type: "SESSION_UPDATE";
    data: {
        session: import('../types').NhostSession;
    };
} | {
    type: "TRY_TOKEN";
    token: string;
} | {
    type: "SIGNIN_ANONYMOUS";
} | {
    type: "SIGNIN_PAT";
    pat: string;
} | {
    type: "SIGNIN_SECURITY_KEY_EMAIL";
    email?: string | undefined;
} | {
    type: "SIGNIN_PASSWORD";
    email?: string | undefined;
    password?: string | undefined;
} | {
    type: "PASSWORDLESS_EMAIL";
    email?: string | undefined;
    options?: import('../types').PasswordlessOptions | undefined;
} | {
    type: "PASSWORDLESS_SMS";
    phoneNumber?: string | undefined;
    options?: import('../types').PasswordlessOptions | undefined;
} | {
    type: "PASSWORDLESS_SMS_OTP";
    phoneNumber?: string | undefined;
    otp?: string | undefined;
} | {
    type: "SIGNUP_EMAIL_PASSWORD";
    email?: string | undefined;
    password?: string | undefined;
    options?: SignUpOptions | undefined;
} | {
    type: "SIGNUP_SECURITY_KEY";
    email?: string | undefined;
    options?: import('../types').SignUpSecurityKeyOptions | undefined;
} | {
    type: "SIGNOUT";
    all?: boolean | undefined;
} | {
    type: "SIGNIN_MFA_TOTP";
    ticket?: string | undefined;
    otp?: string | undefined;
} | {
    type: "SIGNED_IN";
} | {
    type: "SIGNED_OUT";
} | {
    type: "TOKEN_CHANGED";
} | {
    type: "AWAIT_EMAIL_VERIFICATION";
}, {
    value: any;
    context: import('../machines').AuthContext;
}, import('xstate').ResolveTypegenMeta<import('../machines/authentication/machine.typegen').Typegen0, {
    type: "SESSION_UPDATE";
    data: {
        session: import('../types').NhostSession;
    };
} | {
    type: "TRY_TOKEN";
    token: string;
} | {
    type: "SIGNIN_ANONYMOUS";
} | {
    type: "SIGNIN_PAT";
    pat: string;
} | {
    type: "SIGNIN_SECURITY_KEY_EMAIL";
    email?: string | undefined;
} | {
    type: "SIGNIN_PASSWORD";
    email?: string | undefined;
    password?: string | undefined;
} | {
    type: "PASSWORDLESS_EMAIL";
    email?: string | undefined;
    options?: import('../types').PasswordlessOptions | undefined;
} | {
    type: "PASSWORDLESS_SMS";
    phoneNumber?: string | undefined;
    options?: import('../types').PasswordlessOptions | undefined;
} | {
    type: "PASSWORDLESS_SMS_OTP";
    phoneNumber?: string | undefined;
    otp?: string | undefined;
} | {
    type: "SIGNUP_EMAIL_PASSWORD";
    email?: string | undefined;
    password?: string | undefined;
    options?: SignUpOptions | undefined;
} | {
    type: "SIGNUP_SECURITY_KEY";
    email?: string | undefined;
    options?: import('../types').SignUpSecurityKeyOptions | undefined;
} | {
    type: "SIGNOUT";
    all?: boolean | undefined;
} | {
    type: "SIGNIN_MFA_TOTP";
    ticket?: string | undefined;
    otp?: string | undefined;
} | {
    type: "SIGNED_IN";
} | {
    type: "SIGNED_OUT";
} | {
    type: "TOKEN_CHANGED";
} | {
    type: "AWAIT_EMAIL_VERIFICATION";
}, import('xstate').BaseActionObject, {
    signInPassword: {
        data: import('../types').SignInResponse;
    };
    passwordlessSms: {
        data: import('../types').DeanonymizeResponse | import('../types').PasswordlessSmsResponse;
    };
    passwordlessSmsOtp: {
        data: import('../types').NhostSessionResponse;
    };
    passwordlessEmail: {
        data: import('../types').DeanonymizeResponse | import('../types').PasswordlessEmailResponse;
    };
    signInAnonymous: {
        data: import('../types').NhostSessionResponse;
    };
    signInPAT: {
        data: import('../types').NhostSessionResponse;
    };
    signInMfaTotp: {
        data: import('../types').NhostSessionResponse;
    };
    signInSecurityKeyEmail: {
        data: import('../types').SignInResponse;
    };
    refreshToken: {
        data: import('../types').NhostSessionResponse;
    };
    signout: {
        data: import('../types').SignOutResponse;
    };
    signUpEmailPassword: {
        data: import('../types').NhostSessionResponse;
    };
    signUpSecurityKey: {
        data: import('../types').NhostSessionResponse;
    };
    importRefreshToken: {
        data: import('../types').NhostSessionResponse;
    };
}>>, email: string, password: string, options?: SignUpOptions) => Promise<SignUpEmailPasswordHandlerResult>;
//# sourceMappingURL=signUpEmailPassword.d.ts.map